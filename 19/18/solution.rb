$debug = true

class Tunnels
  attr_reader :steps

  def initialize(map, location, x, y, steps = 0, keys_held = [])
    @map = map
    @location = location
    @x, @y = x, y
    @steps = steps
    @keys_held = keys_held
  end

  def dup
    Tunnels.new(
      @map.dup,
      @location.dup,
      @x, @y,
      @steps,
      @keys_held.dup,
    )
  end

  def find_all_keys
    @search_queue = [dup]

    until @search_queue.empty?
      enqueue_keys
    end

    @steps_found
  end

  def enqueue_keys
    # pop instead of shift for dfs
    next_state = @search_queue.shift
    return if @steps_found && next_state.steps >= @steps_found

    keys = next_state.reachable_keys

    next_state.debug
    if keys.empty?
      @steps_found ||= next_state.steps
      @steps_found = [next_state.steps, @steps_found].min
      return
    end

    keys.each do |loc, steps|
      enqueue_valid_states_only(next_state, loc, steps)
    end
  end

  def enqueue_valid_states_only(next_state, loc, steps)
    p [@steps_found, next_state.steps + steps, @visited_states&.size, @visited_states&.values&.minmax]
    return if @steps_found && steps >= @steps_found

    move = next_state.move_to(loc, steps)
    return if seen?(move)

    @search_queue << move
  end

  def seen?(move)
    @visited_states ||= {}

    if @visited_states[move.map_hash] && @visited_states[move.map_hash] <= move.steps
      return true
    end

    @visited_states[move.map_hash] = move.steps
    false
  end

  def map_hash
    [@location, @keys_held.sort]
  end

  def reachable_keys
    @key_search_queue = [[@location, 0]]
    @reachable_keys = []

    until @key_search_queue.empty?
      # debug
      look_for_key
    end

    @reachable_keys
  end

  def move_to(location, steps)
    keys_held = @keys_held.dup
    keys_held << @map[location] if @map[location] =~ /[a-z]/

    map = @map.dup
    map[@location] = '.'
    map[location] = '@'
    map.each { |k,v| map[k] = '.' if v == '*' }

    Tunnels.new(
      map,
      location,
      @x, @y,
      @steps + steps,
      keys_held,
    )
  end

  def look_for_key
    @step = @key_search_queue.shift
    visit_step
  end

  def visit_step
    if @map[@step.first] =~ /[a-z]/
      @reachable_keys << @step
      return
    end

    if @map[@step.first] =~ /[A-Z]/
      open_door
      return
    end

    @map[@step.first] = '*'
    step_neighbors.each { |n| @key_search_queue << [n, @step.last + 1] }
  end

  def open_door
    if @keys_held.include?(@map[@step.first].downcase)
      @map[@step.first] = '*'
      step_neighbors.each { |n| @key_search_queue << [n, @step.last + 1] }
    end
  end

  def step_neighbors
    x, y = @step.first
    [
      [x-1, y],
      [x+1, y],
      [x, y-1],
      [x, y+1],
    ].filter { |loc| !['#', '*'].include?(@map[loc]) }
  end

  def debug
    return unless $debug
    # $stdin.getch
    print "\x1b[H"
    0.upto(@y).each do |y|
      0.upto(@x).each { |x| print @map[[x,y]] || ' ' }
      puts
    end
  end

  class << self
    def parse(text)
      location = nil
      new(
        text.split("\n")
          .each_with_index
          .flat_map do |line, y|
            line.split('')
              .each_with_index
              .map do |ch, x|
                location = [x,y] if ch == '@'
                [[x,y], ch]
              end
          end
          .to_h,
        location,
        text.split("\n").first.size,
        text.split("\n").size,
      )
    end
  end
end

def test
  [
    @example1, 8,
    @example2, 86,
    @example3, 132,
    @example4, 136,
    @example5, 81,
  ].each_slice(2) do |input, expected|
    actual = Tunnels.parse(input).find_all_keys
    raise "Expected #{expected} got #{actual}" unless actual == expected
  end

  :success
end

def solve
  Tunnels.parse(@input).find_all_keys
end

@example1 = <<-map.strip
#########
#b.A.@.a#
#########
map

@example2 = <<-map.strip
########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################
map

@example3 = <<-map.strip
########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################
map

@example4 = <<-map.strip
#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################
map

@example5 = <<-map.strip
########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################
map

@input = <<-map.strip
#################################################################################
#...#.....#......c....#...#.Q.......#...#f#a....#..j..........#...............#.#
#.#.#.#.###.#######.#.#.#.#.###.###.#.#.#.#.###.#.#######.###.#.#.###########.#.#
#.#.#v#.....#.....#.#...#.#.#...#...#.#.#.#...#.......#...#.#.#.#...#...#.....N.#
###.#.#######.###.#X#######.#.###.###.###.###.#########R###.#.#.###.#.#.#.#######
#.K.#.....#...#...#.....#...#.#.....#...#.....#.......#.#.#...#...#.#.#.#...#...#
#.#.#####.#.###.#######.#.###.#####.#.#.#.#####.#####.#.#.#.#####.#.#.#.#####.#.#
#.#.#.U.#.#.#...#...#...#...#...#...#.#.#.#...#.#...#...#.#.....#.#...#.......#.#
#.#.###.#.#.#.#####.#.#.###.###.#.#####.#.#.#.#.###.#####.#####.#####.#####.###.#
#.#.#...#...#.....#.#.#...#.#.#.#.....#.#.#.#.#.Y.#.....#.....#.....#.#...#...#.#
#.#.#.#.#########.#.#.#####.#.#.#####.#.#.###.###.###.#.###.#.#####.###.#.#####.#
#.#...#.#.........#.#.........#.#...#...#.#...#...#...#.#...#.#...#...#.#.......#
#.#######.#########.###########.###.###.#.#.###.###.###.#.###.###.###.#.#######.#
#.....#...#.#...........#.......#.....#.#...#...#.#...#...#.........#.#.#...#...#
#.###.#.###.#.#########.#.#######.#####.#####.###.#.#.###############.#.#.#.#.###
#.#.#.#...#.....#.......#.#.............#.....#.....#.....#.....#...#.#...#.#...#
#.#.#.###.#####.#.#######.#.#####.#####.#.#####.#####.###.#.###.#.#.#.#.###.#####
#.#.#...#.O...#.#.#.......#.#...#.#...#.#...#...#...#...#...#...#.#...#...#.....#
#.#.#.#######.###.#.#####.###.#.#.#.#.#.#.#.#####.#.###.#####.###.#######.#####.#
#.#.#.......#.....#.....#t#...#.#.#.#.#.#.#.#.....#.#.......#.....#.....#.#.....#
#.#.#####.#######.#####.###.###.###.#.#.###.#.#####.###########.###.###.###.###.#
#.......#.........#...#...#.#.#.....#.#.#...#.....#.#.....#...#.....#...#...#.#.#
#######.###########.#####.#.#.#######.#.#.#####.###.#.###.#.###.#####.###.###.#.#
#.......#.......#...#...#.#...#...#...#.#.#.....#...#.#.#.#...#.#...#.....#.#...#
#.#####.#.#######.###.#.#.###.#.###.#####.#.#####.###.#.#.###.###.#.#.#####.#.###
#.#...#...#...#...#...#.#.#...#...#.....#...#...#.......#...#...#.#.#.#...#...#.#
#.#.#.#####.#.#.###.###.#.#.#####.#####.#P###.#.#######.###.###.#.#.###.#.###.#.#
#.#.#.......#...#...#.....#.#.....#...#.#.#i..#...#...#.#.....#...#.#...#...#...#
###.###############.#######.#.#.#.###.#.#.#####.###.#.###.#########.#.#####.###.#
#...#.............#...#...#.#.#.#.#...#.#.....#.#...#.....#.......#.#...#...#.#.#
#.###.#######.###.#.#.#.#.#.###.#.#.#.#.#####.#.#.#.#######.#####.#.###.###.#.#.#
#.#.........#.#...#.#...#.......#...#.#.#.....#.#.#.#...#...#...#.#...#...#.#.#.#
#.###########.#.###.###############.###.#.#####.#.###.#.#.###.###.###.###.#.#.#Z#
#...#.........#.#.#.#.#.......#.....#...#.#.....#.#...#...#...#.....#.....#.#...#
###.#.#########.#.#.#.#.#####.#.#####.#.#.###.###.#.#########.#.###.#######.#.###
#.#...#.....#...#.#...#.#...#.#...#...#.#.#...#...#.#.......#.#...#.#.......#.#.#
#.#####.#.###.###.###.#.#.#.#.#####.###.#.#.###.#.#.###.###.#.###.#.#.#######.#.#
#.....#.#...#.#.......#...#.#.#...#.#...#.#.#...#.#.....#...#...#.#.#.#.....#..x#
#.#####.###.#.#############.#.#.#.#.#.###.#.#.###########.###.#.#.###.#.#.#####.#
#.........#.................#...#...#.......#.................#.#.....#.#.......#
#######################################.@.#######################################
#.......#.................#...............#.....#...........#.........#...#.....#
#.#####.#.#########.#####.#.###########.#.#.###.#.#.#######.#.#.#######.#.###.#.#
#...#.#.#.#...#...#.....#.#...#...#.....#.#...#...#.....#...#.#...#.....#.#...#.#
###.#.#.###.#.#.#.#####.#.#####.#.#.###.#.###.#########.#####.###.#.#####.#V#####
#...#.#...#.#.#.#.....#.#.#.....#.#.#...#...#.#.....#.#.....#...#...#...#.#.....#
#.###.###.#.#.#.#####.#.#.#.#####.#.#.###.###.#.#.#.#.#####.###.#######.#.#####.#
#...#...#.#.#.#.....#...#.#.#.....#.#...#.#...#.#.#.W.#...#...#.........#.....#.#
#.#.###.#G#.#.#####.#####.#.#.#####.#####.#.#####.###.###.###.#####.#########.#.#
#.#.#...#...#.#.....#...#...#.#.........#...#...#...#.......#.....#.#.....#...#.#
###.#.#######.#.#######.#####.#.#######.#.###.#.###.#######.#.#####.#.###.#.###.#
#...#.#.....#...#...........#.#.....#...#p....#...#.....#...#......r#.#.....#...#
#.###.#.#.#######.###.#.#####.#.#####.#.#########.#.###.#E###########.#######.#.#
#.#.....#.#.........#.#.#...#.#.#.....#.#...#...#.#.#...#...#.S.....#...#.....#.#
#.#######.#.#########.#.#.#.#.#.#.#######.###.#.#.#.#.#####.###.#######.#.###.###
#.L.....#.#z....#.....#.#.#.#.#.#...#...#.#...#...#.#.#.........#.......#.#.#...#
#.#####.#.#####.#.#####.#.#.#.#####.#.#.#.#.#########.#.#########.#######.#.###.#
#.#...#.#...#...#.....#.#.#...#.....#.#.#.#.......#...#.#...#.....#.#..o#.#.#...#
#.#.###.###.#.#######.###.#####.#####.#.#.#######.#.###.#.#.#.#####.#.#.#.#.#.###
#.#.#...#...#.......#...#.#.#...I.....#.#...#...#.#...#...#b#.#.......#.#...#...#
#.#.#.###.#####.#######.#.#.#.#########.#.#.###.#.###.#######.#.#######.###.###.#
#.#.#.#.#.......#.....#.#.#......y..#.#.#.#.....#...#...#...#.#..l#..g#.#.....#.#
#.#.#.#.#.#######H#####.#.###.#####.#.#.#.###.#####.#.#.#.#.#####.#.#.#.#.#####.#
#...#.#.#...#...#.#..h#.#...#.#...#...#.#.#...#.....#.#.#.#.....#.#.#.#.#.#.#...#
#.###.#.###.#.#.#.#.#.#.###.###.#.#####.#.#####.#######.#.###.#.#.#.#.#.#.#.#.#.#
#.#...#.......#.#...#.#.....#...#...#...#...#...#.....#.#...#.#.#.#.#...#...#.#.#
#.#.###########.#####D#####.#.#####.#.#.#.#.#.###.###.#.###.#.#.#.#.#######.#.#.#
#.#.#.....#.......#.#.....#...#.....#.#.#.#.#.#...#...#.....#.#.#.#...#.....#.#.#
#M#.#.###.#######.#.#####.#####.#####.#####.#.#.###.###.#####.###.###.#.#####.#.#
#.#.....#.#.....#.......#...#.#.#.......#...#...#...#...#...#.......#...#...#.#.#
#.#######.#.###.#.#########.#A#.###.###.#.#######.#######.#.#.###########.#.#.#.#
#.#w....#.#...#.#.#....d....#.#...#...#.#.......#...#...#.#.#..m#.....#...#...#.#
#.#.###.#.###.#.###.#########.###.#####.#.###.#####.#.#.#.#.###.#.###.#.#######.#
#k#...#.#u#...#...B.#.....#.....#.....#.#...#.....#...#.#.#...#.#.#.#...#..n#...#
#.###.#.#.#.#########.###.#.#.#.#####J#.###.###.#.#####.#.###.###.#.#######.#.###
#.#...#...#...#...#...#.#...#.#.....#.#.#...#.#.#.....#.#...#...#.#.........#.#.#
###.#########.#.###F###.#####.#######.#.#.###.#.#####T#.###.###.#.#.#.#####.#.#.#
#...#.......#s#...#.........#...#...#...#.#...#.....#.#...#...#.#q#.#.#.....#...#
#.###.#####.#.#.#.#########.###.#.#.###.#.#.#.#####.#####.###.#.#.#.#.#########C#
#..e......#...#.#.............#...#.....#...#.....#...........#...#.#...........#
#################################################################################
map