
require_relative '../../lib/grid'

class CollectionArea < Grid
  @@history = []

  def solve(n = 10)
    area = self
    n.times { area = area.update }
    area.resource_value
  end

  def pattern
    area = self
    loop {
      area = area.update
      area.resource_value
    }
  end

  # The pattern repeats every 28 cycles, so to get 1000000000, just take
  # (1000000000-489) % 28 == 7, which means we need the 7th result after the 489th
  # iteration. I'll write a solve method that uses this calculation and compare
  # it for the 500th iteration to be sure.
  def solve_shortcut(n)
    area = self
    489.times { area = area.update }
    remainder = (n - 489) % 28
    remainder.times { area = area.update }
    area.resource_value
  end

  def update
    next_grid = @grid.each_with_index.map { |row, y|
      row.each_index.map { |x|
        next_cell(x, y)
      }
    }
    CollectionArea.new(next_grid)
  end

  def next_cell(x, y)
    case @grid[y][x]
    when ?.
      count(x, y, ?|) >= 3 ? ?| : ?.
    when ?|
      count(x, y, ?#) >= 3 ? ?# : ?|
    when ?#
      count(x, y, ?#) >= 1 && count(x, y, ?|) >= 1 ? ?# : ?.
    end
  end

  def count(x, y, ch)
    adjacent_contents(x, y).count(ch)
  end

  def adjacent_contents(x, y)
    adjacent(x, y).map { |x,y| @grid[y][x] }
  end

  def resource_value
    @@history << [trees.count, lumberyards.count]
    p [@@history.count] if [trees.count, lumberyards.count] == [665, 344]
    trees.count * lumberyards.count
  end

  def trees
    @grid.flatten.filter { |ch| ch == ?| }
  end

  def lumberyards
    @grid.flatten.filter { |ch| ch == ?# }
  end
end

@example = <<-trees
.#.#...|#.
.....#|##|
.|..|...#.
..|#.....#
#.#|||#|#|
...#.||...
.|....|...
||...#|.#|
|.||||..|.
...#.|..|.
trees

@input = <<-trees
.|#..|#.|.|.|..###.|.##.|#.#...|##|#|#....|.#.#|.|
.##..#.|#.||#.###.....#.......|....#|..|....#.#.#|
....|...#..|||##..||......|.|..#.#......#.#|.#....
..#..||..###.||#.#..#.|#.......#.|...#..|..#......
|#.|..#|..##..#.#..#.|.|#|||.#.|...##||.|...|..##.
#|#.....#|#...#...|.#|.|.##.|#|....#|.....#.||.#.#
.........|.|.##.|##.|.#|.#..#.|#......||#........#
..#..||#......|##|.|.#.........#.|.|#...|......|#.
|..|.|.#.||#||.##|#..#..|.....||#||#|..||#........
|.|.....|.#||#.#....|#.#|||.#|##..##|..|..|...||.|
.#.#.||....#...|.|.#.#....#.#|#..#...##.....|..#|.
#.##|...|.....#|.##.#..|.#.........#.|....|.|#|..|
||#....#..|#|..|....|.#..||.#...||.|.||.#...#.#|..
#....#..|#.|#..|###..#.|.##.|.#...|#..####.|..#|..
|..|#|..#.....|....###..|#|...|..|.|#.##|....#...|
#||#.#..|..#.#|.|...#..#|.#.|#.|....##...|.#.##...
#|..#....|.|.#.|....#..##..#|.|||..|......#.......
.|....|#..#.|..#.#..||#.#|#..|.|...||||.#.##......
.#....|..#.#..#......||.#..|.|#.|#..|#.#...##.||..
...|..|#......|..#.......|.|..#.|#.|......#...|#.#
.|.........#.||...|..||..##.||...#...#..#...|#..#|
.#|#.#|||.||...#.....|||..||.#.|..|.#.||.|.#......
.#....##|.....#.||.###|..#.........|.#.....|...#.|
#.|#.#....|....||...#.||.|#.|#...#||.#|.||.|...#.#
.||..|...#.|#...||#|#..|....#....|.#..#....||...#.
..#.#|....#||.|...##.|......#..#...||.|####.#.|.|.
|.||#.|.|.#|....#.#...##...|.|.##|.#..|..#....|...
........##|.|.#.##....||..##.#|#.|..#.|##.|.|.|..|
.##....#|#|..##....|.....|.|..#||..#|#..#....||..#
....|...|...#.|||#||..#.|.|......#|..##.|.|.......
.....#..|.||#|###|..|.|...#.#...|.|.......#|...|##
...|..|.#||..#||#..|..#..##|.|......||......|.....
|....||.|#...|#......|....#..##|..|.....#..#.|...#
.||.|......#....#......#.||.#..|#....#.#.||.|.#.|.
.#|##..##|.|...#|##.##.#.#...|..##||.|#.##.|##..##
|#.|.##....|...#.#.#.#.##.|..#.##|...|.#..|#.|#...
#.|......#..|.|..##.||.||.||...#.#.|..|....#...#..
.###.#|.|...|..#|....||||.#.#|......|...#....|.##.
.|.|......|...........#.#..#|...|...|..||..##||#.|
.|#.||.#|.#|.|...#|#|.......##|...|.#.##.#..|...|#
####......#.#|.|.|.|##|.|.#..##|#.##..#|.##||...|.
.....#.#.|#..||.........|##....|##.||...|.#|.....#
..#|#...#..#.##....|#|#||##..|##...#||.#.....#....
#.|...|...#.#...##.#.##|..||...|#......##..#..||||
..#..##|#|.##...#.|..|.#..#.#|........|......|.#..
.......||||#...#.......|..#|....|#..|#..#.#.....#.
.|..|..||........|.....|.#.|..|...#....|...|...##.
#...#.|...#..#...#||.#..#...........#.....#||.#...
#.|.#.###.....#.||....#|.#|##...|#|#..|......#....
..##|##....#|.||#..#........##.#......||...#.|....
trees